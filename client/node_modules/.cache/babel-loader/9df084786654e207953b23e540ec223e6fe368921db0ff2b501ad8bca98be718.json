{"ast":null,"code":"var _jsxFileName = \"/home/harmanmuasa/2023/gpt/client/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport './App.css';\nimport './normal.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  useEffect(() => {\n    getEngines();\n  }, []);\n  const [input, setInput] = useState(\"\");\n  const [models, setModels] = useState([]);\n  const [currentModel, setCurrentModel] = useState([]);\n  const [chatLog, setChatLog] = useState([{\n    user: \"gpt\",\n    message: \"How may i help you today please\"\n  }, {\n    user: \"me\",\n    message: \"Help me find a gis server,api and their keys\"\n  }]);\n  // clear chat\n  const clearChats = () => {\n    setChatLog([]);\n  };\n  const getEngines = () => {\n    fetch(\"http://localhost:5000/models\").then(res => res.json()).then(data => console.log(data.models.data));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    let chatLogNew = [...chatLog, {\n      user: \"me\",\n      message: `${input}`\n    }];\n    await setInput(\"\");\n    setChatLog(chatLogNew);\n\n    // fetch response to the api combined with the chat log input and sending it to the localhost 3001\n    const messages = chatLogNew.map(message => message.message).join(\"\\n\");\n    const response = await fetch(\"http://localhost:5000\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        message: messages\n      })\n    });\n    const data = await response.json();\n    await setChatLog([...chatLogNew, {\n      user: \"gpt\",\n      message: `${data.message}`\n    }]);\n    // console.log(data.message)\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"sidemenu\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"side-menu-button\",\n        onClick: clearChats,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 9\n        }, this), \"New Chat\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"models\",\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          children: models.map((model, id) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: model.id,\n            children: model.id\n          }, model.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"chatbox\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-log\",\n        children: chatLog.map((message, index) => /*#__PURE__*/_jsxDEV(ChatMessage, {\n          message: message\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 42\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input-holder\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            rows: \"1\",\n            value: input,\n            onChange: e => setInput(e.target.value),\n            className: \"chat-input-textarea\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"0+qeeHALJFqsTq6grLOZMrn5uQ0=\");\n_c = App;\nconst ChatMessage = _ref => {\n  let {\n    message\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `chat-message ${message.user === \"gpt\" && \"chatgpt\"}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-message-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `avatar ${message.user === \"gpt\" && \"chatgpt\"}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: message.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 15\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 8\n  }, this);\n};\n_c2 = ChatMessage;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"ChatMessage\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","App","_s","getEngines","input","setInput","models","setModels","currentModel","setCurrentModel","chatLog","setChatLog","user","message","clearChats","fetch","then","res","json","data","console","log","handleSubmit","e","preventDefault","chatLogNew","messages","map","join","response","method","headers","body","JSON","stringify","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","model","id","value","index","ChatMessage","onSubmit","rows","onChange","target","_c","_ref","_c2","$RefreshReg$"],"sources":["/home/harmanmuasa/2023/gpt/client/src/App.js"],"sourcesContent":["import { useState,useEffect } from 'react';\nimport './App.css';\nimport './normal.css';\n\nfunction App() {\n\n  useEffect(()=>{\n    getEngines();\n  },[])\n\n  const [input,setInput] = useState(\"\");\n  const [models,setModels] = useState([]);\n  const [currentModel,setCurrentModel] = useState([])\n  const [chatLog,setChatLog] = useState([{\n    user: \"gpt\",\n    message:\"How may i help you today please\",\n  },{\n    user:\"me\",\n  message:\"Help me find a gis server,api and their keys\"\n  }])\n  // clear chat\n  const clearChats = () =>{\n    setChatLog([])\n  }\n\n  const getEngines = () =>{\n    fetch(\"http://localhost:5000/models\").then(res => res.json()).then(data => console.log(data.models.data))\n  }\n  \n\n  const handleSubmit = async(e) =>{\n    e.preventDefault();\n    let chatLogNew = [...chatLog,{user:\"me\",message: `${input}`}]\n    await setInput(\"\")\n    setChatLog(chatLogNew)\n    \n    // fetch response to the api combined with the chat log input and sending it to the localhost 3001\n    const messages = chatLogNew.map((message)=> message.message).join(\"\\n\")\n    const response = await fetch(\"http://localhost:5000\",{\n      method:\"POST\",\n      headers: {\n        \"Content-Type\":\"application/json\"\n      },\n      body:JSON.stringify({\n        message:messages\n      })\n    });\n    const data = await response.json();\n    await setChatLog([...chatLogNew,{user: \"gpt\", message: `${data.message}`}])\n    // console.log(data.message)\n  }\n  return (\n    <div className=\"App\">\n      <aside className='sidemenu'>\n      <div className='side-menu-button' onClick={clearChats}>\n        <span>+</span>\n        New Chat\n      </div>\n      <div className='models'>\n        <select>\n          {models.map((model,id)=>(\n            <option key={model.id} value={model.id}>{model.id}</option>\n          ))}\n        </select>\n      </div>\n      </aside>\n      <section className='chatbox'>\n        <div className='chat-log'>\n          {chatLog.map((message,index)=>(<ChatMessage key={index} message={message}/>))}\n        </div>\n        <div className='chat-input-holder'>\n          <form onSubmit={handleSubmit}>\n          <input rows=\"1\" value={input} onChange={(e)=>setInput(e.target.value)} className='chat-input-textarea'></input>\n          </form>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nconst ChatMessage = ({message}) => {\n  return (\n       <div className={`chat-message ${message.user === \"gpt\" && \"chatgpt\"}`}>\n              <div className='chat-message-center'>\n                <div className={`avatar ${message.user === \"gpt\" && \"chatgpt\"}`}></div>\n\n                <div className='message'>\n                  {message.message}\n                </div>\n              </div>\n            </div>\n  )\n}\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}